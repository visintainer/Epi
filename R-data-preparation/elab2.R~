library(lattice)     
library(nettools)
library(igraph)
source("functions.R")

## LOAD DATA AND GENERATE DATES DFROM TIME
## Proxy <- read.csv("Proximity.csv", header=TRUE, as.is=TRUE)
## Proxy$date <- as.Date(Proxy$time)
## Symp <- read.csv("FluSymptoms.csv", header=TRUE, as.is=TRUE)
## Symp$date <- as.Date(Symp$time)

## save(Symp,Proxy,file='1-data.RData')
load('1-data.RData')

OrigD <- "1970-01-01"
gap <- 7

Soggetti <- unique(Proxy$user.id)

## Either Sore Throat Or Runny Nose
dis1 <- Symp[,3] | Symp[,4]
## Fever
dis2 <- as.logical(Symp[,5])
## sore.throat and nausea.vomiting.diarrhea
## or
## sore.throat and fever
dis3 <- (Symp[,3] & Symp[,6]) | (Symp[,3] & Symp[,5])

dis3 <- fillgap(dis3,gap)

events3 <- getevents(dis3)

## Get Dates
start3.D <- min(events3$da1)
stop3.D <- max(events3$da2)

symptoms3 <- getsymptoms(events3,start3.D,stop3.D)
symptoms3 <- symptoms3[unique(events3$id),]

plotsympt(symptoms3,start3.D,stop3.D,OrigD, main="Symptoms3")

## save.image("1bis-data.RData")
load("1bis-data.RData")

## Get Conections during events
connections3 <- getconnections(events3,Proxy,start3.D,stop3.D,OrigD)
## save(connections1,connections2,connections3,file='2-data.RData')
load('2-data.RData')

##PLOT Connections Total
X11()
plotconn(connectionsALL,uniqueconnectionsALL,start1.D,stop1.D,OrigD)

## Get unique connections during events
uniqueconnections3 <- getuniqueconnections(events3,Proxy,start3.D,stop3.D,OrigD)
## save(uniqueconnections1,uniqueconnections2,uniqueconnections3,file='3-data.RData')
load('3-data.RData')

## Get Conections
connectionsALL <- getallconnections(Proxy,start1.D,stop1.D,OrigD,Soggetti)
## Get unique connections
uniqueconnectionsALL <- getalluniqueconnections(Proxy,start1.D,stop1.D,OrigD,Soggetti)

## save(connectionsALL,uniqueconnectionsALL,file='4-data.RData')
load('4-data.RData')

## Get connection map Day to Subject
IDconnectionsALL.D.S <- getallIDconnections.D.S(Proxy,start1.D,stop1.D,OrigD,Soggetti)
## Get connection map Subject to Day
IDconnectionsALL.S.D <- getallIDconnections.S.D(Proxy,start1.D,stop1.D,OrigD,1:80)

## save(AdjL,ddM,IDconnectionsALL.D.S,IDconnectionsALL.S.D,file='5-data.RData')
load('5-data.RData')

## Compute masks for infective periods
mask3symp <- matrix(FALSE,dim(connections3)[1],dim(connections3)[2])
colnames(mask3symp) <- colnames(connections3)
rownames(mask3symp) <- rownames(connections3)
for (s in 1:length(events3$id)){
    mask3symp[as.character(events3$id[s]),as.character(as.Date(events3$da1[s]:events3$da2[s],origin=OrigD))] <- TRUE
}

allc <- list()
P <- Proxy[,c(1,2)]
for (s in 1:length(Soggetti)){
    allc[as.character(Soggetti[s])] <- sum(P==Soggetti[s])
}

## PLOTS
## TOT Proxy date 
x11()
hist(Proxy$date[which((Proxy$date>"2009-01-01")&(Proxy$date<"2009-05-31"))],breaks=150,main="Total contacts 01-01 31-05")
abline(v=c(as.Date("2009-02-01"),as.Date("2009-05-01"),as.Date("2009-04-01"),as.Date("2009-03-01")),col="red",lw=3,lt=2)
abline(v=c(as.Date("2009-03-22"),as.Date("2009-03-28")),col="darkgreen",lw=3,lt=2)
abline(v=events3$da1,col="blue",lw=3)

## Generate AdjList
AdjL <- list()
for (d in names(IDconnectionsALL.D.S)){
    AdjL[[d]] <- matrix(0, length(Soggetti), length(Soggetti))
    colnames(AdjL[[d]]) <- Soggetti
    row.names(AdjL[[d]]) <- Soggetti
    for (s in names(IDconnectionsALL.D.S[[d]])){
        T <- table(IDconnectionsALL.D.S[[d]][[s]])
        AdjL[[d]][s,names(T)] <- T
    }
}
ddM <- netdist(AdjL)
fit <- cmdscale(ddM$HIM,eig=TRUE, k=5)

x <- fit$points[,1]
y <- fit$points[,2]
mycol <- c(rep("green",22),rep("yellow4",28),rep("orange", 31),rep("red",18))

## GRAFICO0:
x11()
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
  main="Metric MDS", type="n")
plot(x, y-0.0018, col = mycol, pch=19)
text(x, y, labels = names(AdjL), cex=.7, col = mycol)

## GRAFICO1:
X11()
conn <- uniqueconnections3
ev <- events3
print(unique(ev$id))
mycols <- c("red","blue")
par(mfrow=c(3,7))
for (Sog in unique(ev$id)){
    col.l=rep("green4",length(date)-1)
    col.s=rep("green4",length(date))
    evv <- ev[which(ev$id==Sog),]
    plot(conn[as.character(Sog),]~as.Date(c(start3.D:stop3.D),origin=OrigD),
         type="b",
         col=c("green4"),
         pch=20,
         cex=2,
         lwd=2,
         lty=1,
         main=as.character(Sog)
         )
    for (i in 1:dim(evv)[1]){
        abline(v=c(as.Date(evv[i,2]),as.Date(evv[i,3])),col=mycols[i],lw=4)
    }
}



## GRAFICO2:
MAIN <- "Sintomi 3"
##postscript(file="../report/Grafico2-a.ps",height=8,width=8,onefile=TRUE,horizontal=FALSE)
## a) numero di EV.SINTOMO3 nel tempo 
plotsympt(symptoms3,start3.D,stop3.D,OrigD)
##dev.off()

## GRAFICO3:
## a) distribuzione  del numero medio di contatti giornalieri che un individuo ha (media calcolata over time) secondo definizione
postscript(file="../report/Grafico3-a.ps",height=6,width=8,onefile=TRUE,horizontal=FALSE)
par(mfrow=c(2,1))
hist(rowMeans(connectionsALL,na.rm=TRUE),breaks=30, main="tot conn all subj")
hist(rowMeans(uniqueconnectionsALL,na.rm=TRUE),breaks=30, main="unic conn all subj")
dev.off()
## b) distribuzione  del numero medio di contatti giornalieri che un individuo ha (media calcolata over time) IN PRESENZA DI SINTOMI3 secondo definizione di NCONTATTI1
postscript(file="../report/Grafico3-b.ps",height=8,width=8,onefile=TRUE,horizontal=FALSE)
x11()
par(mfrow=c(2,1))
hist(rowMeans((connections3 * mask3symp),na.rm=TRUE),breaks=5, main="tot conn symptoms")
hist(rowMeans((connections3 * !mask3symp),na.rm=TRUE),breaks=5, main="tot conn no symptoms")
dev.off()
## c) distribuzione  del numero medio di contatti giornalieri che un individuo ha (media calcolata over time) IN PRESENZA DI SINTOMI3 secondo definizione di NCONTATTI1
postscript(file="../report/Grafico3-b.ps",height=8,width=8,onefile=TRUE,horizontal=FALSE)
x11()
par(mfrow=c(2,1))
hist(rowMeans((uniqueconnections3 * mask3symp),na.rm=TRUE),breaks=3, main="unic conn symptoms")
hist(rowMeans((uniqueconnections3 * !mask3symp),na.rm=TRUE),breaks=3, main="unic conn no symptoms")
dev.off()

## GRAFICO4:
## distribuzione di NCONTATTI3 sugli individui 
hist(unlist(allc),breaks=10)
postscript(file="../report/Grafico5.ps",height=6,width=8,onefile=TRUE,horizontal=FALSE)
hist(rowSums(uniqueconnectionsALL),breaks=10, main= "5")
dev.off()




## GRAFICO 5:
## - Distribuzione delle rilevazioni di prossimita per ogni soggetto lungo la giornata + media su tutti i soggetti.
alldates <- as.Date(names(IDconnectionsALL.D.S), origin=OrigD)
ss <- sapply(Proxy$time,function(x) strsplit(strsplit(x, " ")[[1]][2], ":")[[1]][1])

allID <- list()
for (s in names(IDconnectionsALL.S.D)){
    for (d in names(IDconnectionsALL.S.D[[s]])){
        allID[[s]] <- c(allID[[s]],unique(IDconnectionsALL.S.D[[s]][[d]]))
    }
}
allIDc <- c()
for (i in names(allID)){
    allID[[i]] <- unique(allID[[i]])
    allIDc <- c(allIDc,length(allID[[i]]))
}
X11()
hist(log(allIDc), breaks=30)

## GRAFICO 6:
## Comparison fra soggetti
uniqueconnectionsALLnozeros <- uniqueconnectionsALL[which(rowSums(uniqueconnectionsALL)!=0),]
heatmap(cor(t(uniqueconnectionsALLnozeros)))

d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
totADJ <- matrix(0,nrow=d1,ncol=d2) 
for(i in 1:length(AdjL)){
    totADJ <- totADJ+AdjL[[i]]}

totG <- graph.adjacency(totADJ,mode="undirected",weighted=TRUE)
cont <- 0

for (e in which(E(totG)$weight<10000)){
    totG <- delete.edges(totG,(E(totG)[e]-cont))
    cont <- cont+1
}

plot(totG, layout=layout.circle(totG),edge.width=E(totG)$weight)

clusters(totG,layout=layout.circle)

#############################
load('1-data.RData')
load('1bis-data.RData')
load('2-data.RData')
load('3-data.RData')
load('4-data.RData')
load('5-data.RData')
#############################

for (n in 1:length(IDconnectionsALL.D.S)){
    write.table(AdjL[[n]],
                file=paste("data-ready/Adj_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}

names(AdjL) <-as.numeric(as.Date(names(AdjL)))

######## GENERATE CUMULATIVE ADJ FOR ndays
######## AND WITH FIRST ROW AND COLUMN == 0
ndays <- 7
d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
if (d1!=d2){print("matricinonquadrateCAZZO!")}
for (n in 1:length(IDconnectionsALL.D.S)){
    toprint <- matrix(0,nrow=d1,ncol=d2)
    print(n)
    if (n<=(ndays)){
        print("in")
        for (m in 1:n){
            toprint <- toprint + AdjL[[m]]
        }
    }else{
        print("out")
        for (m in (n-ndays+1):n){
            toprint <- toprint + AdjL[[m]]
        }
    }
    toprint <- rbind(rep(0,d1),toprint)
    toprint <- cbind(rep(0,(d1+1)),toprint)
    diag(toprint) <- 0
    write.table(toprint,file=paste("data-ready-ORIG/Adj_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}

######## GENERATE CUMULATIVE ADJ FOR ndays
### BUT JUST 1 - 0: PRESENCE - ABSENCE OF LINK
######## AND WITH FIRST ROW AND COLUMN == 0
ndays <- 7
d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
if (d1!=d2){print("matricinonquadrateCAZZO!")}
for (n in 1:length(IDconnectionsALL.D.S)){
    toprint <- matrix(0,nrow=d1,ncol=d2)
    print(n)
    if (n<=(ndays)){
        print("in")
        for (m in 1:n){
            toprint <- toprint + AdjL[[m]]
        }
    }else{
        print("out")
        for (m in (n-ndays+1):n){
            toprint <- toprint + AdjL[[m]]
        }
    }
    toprint <- rbind(rep(0,d1),toprint)
    toprint <- cbind(rep(0,(d1+1)),toprint)
    toprint[which(toprint!=0)] <- 1
    diag(toprint) <- 0
    write.table(toprint,file=paste("data-ready-ORIG/Adj_binary_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}


######## GENERATE CUMULATIVE ADJ FOR ALL DAYS
######## AND WITH FIRST ROW AND COLUMN == 0
allM <- matrix(0,nrow=d1,ncol=d2) 
for(i in 1:length(AdjL)){
    allM <- allM+AdjL[[i]]}
allM <- rbind(rep(0,d1),allM)
allM <- cbind(rep(0,(d1+1)),allM)
write.table(allM,file="data-ready-ORIG/Adj_0",quote = FALSE,sep="\t",row.names=FALSE,col.names=FALSE)

ck <- 0
a <- 3
b <- 10
for (i in 0:3)
    ck <- ck+(AdjL[[4-i]])[a,b]

ck

######## GENERATE CUMULATIVE ADJ FOR ALL DAYS
### BUT JUST 1 - 0: PRESENCE - ABSENCE OF LINK
######## AND WITH FIRST ROW AND COLUMN == 0
allM <- matrix(0,nrow=d1,ncol=d2) 
for(i in 1:length(AdjL)){
    allM <- allM+AdjL[[i]]}
allM[which(allM!=0)] <- 1
allM <- rbind(rep(0,d1),allM)
allM <- cbind(rep(0,(d1+1)),allM)
write.table(allM,file="data-ready-ORIG/Adj_0binary",quote = FALSE,sep="\t",row.names=FALSE,col.names=FALSE)

######## GENERATE TEST ALL1

tst <- matrix(rep(1,5625),75,75)

for (n in 1:length(IDconnectionsALL.D.S)){
    write.table(tst,
                file=paste("data-test-all1/Adj_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}



######## GENERATE CUMULATIVE ADJ FOR ndays WITH ORDERED INDX!!!
######## AND WITH FIRST ROW AND COLUMN == 0
##sss <- sort(as.numeric(colnames(AdjL[[1]])), index.return=TRUE)
ordidx <- sort(as.numeric(colnames(AdjL[[1]])))
ordidx <- as.character(ordidx)
ndays <- 7
ccc <- c()
AdjL7 <- list()
d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
if (d1!=d2){print("matricinonquadrateCAZZO!")}
toprint <- matrix(0,nrow=d1,ncol=d2)
for (n in 1:length(IDconnectionsALL.D.S)){
    toprint <- matrix(0,nrow=d1,ncol=d2)
    print(n)
    if (n<=(ndays)){
        print("in")
        for (m in 1:n){
            toprint <- toprint + AdjL[[m]]
        }       
    }else{
        print("out")
        for (m in (n-ndays+1):n){
            toprint <- toprint + AdjL[[m]]
        }
    }
    toprint <- toprint[ordidx,]
    toprint <- toprint[,ordidx]
    diag(toprint) <- 0
    ccc <- c(ccc,toprint[1,2])
    toprint <- rbind(rep(0,d1),toprint)
    toprint <- cbind(rep(0,(d1+1)),toprint)
    AdjL7[[n]] <- toprint
    write.table(toprint,file=paste("data-ready-ORDIN/Adj_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}
names(AdjL7) <- names(AdjL)

######## GENERATE CUMULATIVE ADJ FOR ndays WITH ORDERED INDX!!!
######## AND WITH FIRST ROW AND COLUMN == 0
##sss <- sort(as.numeric(colnames(AdjL[[1]])), index.return=TRUE)
ordidx <- sort(as.numeric(colnames(AdjL[[1]])))
ordidx <- as.character(ordidx)
ndays <- 7
ccc <- c()
AdjL7 <- list()
d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
if (d1!=d2){print("matricinonquadrateCAZZO!")}
toprint <- matrix(0,nrow=d1,ncol=d2)
for (n in 1:length(IDconnectionsALL.D.S)){
    toprint <- matrix(0,nrow=d1,ncol=d2)
    print(n)
    if (n<=(ndays)){
        print("in")
        for (m in 1:n){
            toprint <- toprint + AdjL[[m]]
        }       
    }else{
        print("out")
        for (m in (n-ndays+1):n){
            toprint <- toprint + AdjL[[m]]
        }
    }
    toprint <- toprint[ordidx,]
    toprint <- toprint[,ordidx]
    toprint[which(toprint!=0)] <- 1
    diag(toprint) <- 0
    ccc <- c(ccc,toprint[1,2])
    toprint <- rbind(rep(0,d1),toprint)
    toprint <- cbind(rep(0,(d1+1)),toprint)
    AdjL7[[n]] <- toprint
    write.table(toprint,file=paste("data-ready-ORDIN/Adj_binary_",as.numeric(as.Date(names(IDconnectionsALL.D.S)[n])), sep=""),
                quote = FALSE,
                sep="\t",
                row.names=FALSE,
                col.names=FALSE)
}
names(AdjL7) <- names(AdjL)


###### TEST

AAAU <- read.table("data-ready-ORDIN/Adj_14338")
AAA <- read.table("data-ready/Adj_14338")

all(AAAU[sss$ix,sss$ix] == AAA)


######## GENERATE CUMULATIVE ADJ FOR ALL DAYS WITH ORDERED INDX!!!
######## AND WITH FIRST ROW AND COLUMN == 0
d1 <- dim(AdjL[[1]])[1]
d2 <- dim(AdjL[[1]])[2]
toprint <- matrix(0,nrow=d1,ncol=d2)
allM <- matrix(0,nrow=d1,ncol=d2) 
for(i in 1:length(AdjL)){
    allM <- allM+AdjL[[i]]}

allM <- allM[ordidx,]
allM <- allM[,ordidx]
diag(allM) <- 0
toprint <- allM
toprint <- rbind(rep(0,d1),toprint)
toprint <- cbind(rep(0,(d1+1)),toprint)
write.table(toprint,file="data-ready-ORDIN/Adj_0",quote = FALSE,sep="\t",row.names=FALSE,col.names=FALSE)



######## GENERATE CUMULATIVE ADJ FOR ALL DAYS
### BUT JUST 1 - 0: PRESENCE - ABSENCE OF LINK
######## AND WITH FIRST ROW AND COLUMN == 0
allM <- matrix(0,nrow=d1,ncol=d2) 
for(i in 1:length(AdjL)){
    allM <- allM+AdjL[[i]]}
allM[which(allM!=0)] <- 1
allM <- rbind(rep(0,d1),allM)
allM <- cbind(rep(0,(d1+1)),allM)
write.table(allM,file="data-ready-ORDIN/Adj_0binary",quote = FALSE,sep="\t",row.names=FALSE,col.names=FALSE)


############ TEST
colnames(AdjL[[1]])

ccc <- c()
for(i in 1:length(AdjL)){ccc <- c(ccc,AdjL[[i]][2,31])}
sum(ccc)


#########

Za <- events3[-c(3,6,10),-3]
Z <- array(Za[,2])
Zadacopiare <- cbind(Za[,1],as.numeric(Za[,2]))
Zadacopiare <- Zadacopiare[order(Zadacopiare[,2]),]
Infect <- Zadacopiare[,1]
Z <- Zadacopiare[,2]
AS <- as.numeric(colnames(allM))
SI <- Zadacopiare[,1]
## SS <- AS[!(AS%in%SI)]
## SI <- SS <- NA
